/*
Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring

Example 1:
Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:
Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:
Input: s = ""
Output: 0
 

Constraints:
0 <= s.length <= 3 * 104
s[i] is '(', or ')'.
*/






import java.util.Stack;

class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);  // Initialize the stack with -1 to handle the base case
        
        int maxLength = 0;  // Variable to keep track of the maximum length of valid parentheses
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            if (c == '(') {
                // Push the index of '(' onto the stack
                stack.push(i);
            } else {
                // Pop the top element from the stack
                stack.pop();
                
                if (stack.isEmpty()) {
                    // If the stack is empty, push the current index onto the stack
                    stack.push(i);
                } else {
                    // Calculate the length of the current valid substring
                    int currentLength = i - stack.peek();
                    // Update the maximum length if the current length is greater
                    maxLength = Math.max(maxLength, currentLength);
                }
            }
        }
        
        return maxLength;  // Return the maximum length of valid parentheses
    }
}
